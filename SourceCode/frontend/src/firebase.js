import { initializeApp } from "firebase/app";
import { getFirestore, collection, getDocs, writeBatch, doc } from "firebase/firestore";

const config= {
    apiKey: "AIzaSyC7nygfHugm6ynTHRcNM3XSxmtXy85wrg0",
    authDomain: "pine-care-derby.firebaseapp.com",
    projectId: "pine-care-derby",
    storageBucket: "pine-care-derby.appspot.com",
    messagingSenderId: "55090232340",
    appId: "1:55090232340:web:1f1a866e83463647a0bb01",
    measurementId: "G-BB7TBNHDCJ"
  };

const firebaseApp = initializeApp(config);
export const db = getFirestore(firebaseApp)

// CRUD Functions


/* ---RACER--- */
// Update/Create Racers 
export async function updateAllRacers(racersId, newList, removedRacers){
    // create batch to update racer if already in collection
    // also add racer if not already in db
    const batch = writeBatch(db);
    console.log(newList);
    for(let i = 0; i < newList.length; i++){
        if(newList[i].dbId === undefined){
            // gets autogenerated ref
            let myNewRef = doc(collection(db, "MasterRacers", racersId, "Racers"));
            batch.set(myNewRef, { name: newList[i].name, id: newList[i].id, score: newList[i].score });
        }
        else{
            const myRef = doc(db, "MasterRacers", racersId, "Racers", newList[i].dbId);
            batch.update(myRef, { name: newList[i].name, id: newList[i].id, score: newList[i].score });
        }
    }
    for(let i = 0; i < removedRacers.length; i++){
        if(removedRacers[i].dbId === undefined) continue;

        let myRemRef = doc(db, "MasterRacers", racersId, "Racers", removedRacers[i].dbId);
        batch.delete(myRemRef);
    }
    
    await batch.commit();
}

export async function getAllRacers(racersId){
    const query = await getDocs(collection(db, "MasterRacers", racersId, "Racers"));
    let allRacers = [];
    let allRacersMap = new Map();
    query.forEach((doc)=> {
        let racer = doc.data();
        allRacersMap.set(doc.id, racer);
        racer.dbId = doc.id;
        allRacers.push(racer);
    });

    return {
        array: allRacers,
        map: allRacersMap
    };
}

/* ---Schedule--- */
// Create 
// export async function replaceSchedule(scheduleId, schedule){
//     let originalSchedule = getSchedule(scheduleId);
//     const batch = writeBatch(db);
//     schedule.forEach((race) =>{
//         let myNewRef = doc(collection(db, "MasterSchedule", scheduleId, "Schedule"));
//         batch.set(myNewRef, { name: newList[i].name, id: newList[i].id, score: newList[i].score });
//     });
//     originalSchedule.forEach((race) =>{
//         let myRef = doc(db, "MasterSchedule", scheduleId, "Schedule", race.dbId);
//         batch.delete(myRef);
//     });
// }

export async function getSchedule(scheduleId){
    const query = await getDocs(collection(db, "MasterSchedule", scheduleId, "Schedule"));
    let schedule = [];
    query.forEach((doc)=> {
        let race = doc.data();
        race.dbId = doc.id;
        schedule.push(race);
    });

    return schedule;
}

// // update existing
// export async function resetSchedule(scheduleId, schedule){

// }

// export async function getSchedule(scheduleId){
//     const query = await getDocs(collection(db, "Schedule"));
//     let schedule = [];
//     query.forEach((doc) => {
//         let race = doc.data();
//         race.dbId = doc.id;
//         // doc.data() is never undefined for query doc snapshots
//         schedule.push(race)
//       });
//       return schedule;
// }